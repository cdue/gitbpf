#!/bin/sh
#
# git-bpt -- A collection of Git extensions to provide high-level
# repository operations for Git Branch Per Feature (BPF) workflow.
#
# This project is an implementation of the Git BPF workflow
# described by Adam Dymitruk:
# 	http://dymitruk.com/blog/2012/02/05/branch-per-feature/
# And its source code is wildly inspired by gitflow tools source code:
#    https://github.com/nvie/gitflow
# 
# Feel free to contribute to this project at:
#    https://github.com/cdue/gitbpf
#
# Copyright (c) 2015 Cédric Dué
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE
#

if [ -z $GITBPF_DIR ]; then
	export GITBPF_DIR=$(dirname "$(which git-bpf | sed -e 's,\\,/,g')")
fi

# load common functionality
. "$GITBPF_DIR/gitbpf-common"

init() {
  require_git_repo
  require_gitbpf_initialized
  gitbpf_load_settings
}


usage() {
	echo "usage: git bpf share-rerere pull"
	echo "       git bpf share-rerere commit"
	echo "       git bpf share-rerere push"
}

cmd_default() {
	cmd_pull
}

cmd_help() {
	usage
}

cmd_pull() {
	local project_root_path=$(git rev-parse --show-toplevel)

	local remote=$(git config --get gitbpf.remotename)
	local remote_url=$(git config --get remote.origin.url)
	local branch=$(git config --get gitbpf.branch.rerere)

	if [ ! -z $remote ] && [ ! -z $remote_url ] && [ ! -z $branch ] ; then
		# echo "go to: "$project_root_path"/.git/"$branch
		cd $project_root_path"/.git/"$branch
		git_do "pull" '--quiet' '--rebase' $remote $branch
		cd -
	else
		warn "Unable to pull shared rerere from an unknown remote branch"
	fi
}

#cmd_commit() {
#
#}

#cmd_push() {
#
#}